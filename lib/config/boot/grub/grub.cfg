########################################################################################################################
# exfat格式无法用于iso启动；
# hfsplus格式无法用于search但可以用于iso启动；
# grub从deepin系统盘中获取，而非ISO盘。
# 以上均会报Invalid magic number。
# 无法将命令的输出赋值给变量
# https://askubuntu.com/questions/317352/can-grub-be-scheduled-this-means-changing-default-entry-auto-login-at-defi/323516#323516
# UEFI下无法使用memdisk，因为无法模拟16位模式，速度慢。memdisk和grub4dos都只能在legacy-bios下用。
# grub2引导的是windows的bootmgfw.efi
# 命令 chainloader /EFI/microsoft/Boot/bootmgfw.efi
# http://bbs.wuyou.net/forum.php?mod=viewthread&tid=370578&extra=&page=1
# http://bbs.wuyou.net/forum.php?mod=viewthread&tid=303679&fromuid=502314
# http://bbs.wuyou.net/forum.php?mod=viewthread&tid=409705
# http://www.jinbuguo.com/linux/grub.cfg.html
########################################################################################################################
if loadfont /boot/grub/font.pf2 ; then
	set gfxmode=auto
	insmod efi_gop
	insmod efi_uga
	insmod gfxterm
	terminal_output gfxterm
fi
loadfont ($root)/boot/grub/themes/deepin/ag-NotoMono-Regular-0-12.pf2
loadfont ($root)/boot/grub/themes/deepin/ag-NotoSansCJK-Regular-2-12.pf2
insmod jpeg
insmod png
set theme=($root)/boot/grub/themes/deepin/theme.txt
export theme
insmod regexp
set menu_color_normal=white/black
set menu_color_highlight=black/light-gray
set PREFIX=/iso
set CURRENT_CONFIG=$root/boot/grub/grub.cfg
set MEMDISK=$root/boot/memdisk
if [ -e "/boot/grub/background.png" ]; then
    background_image "/boot/grub/background.png"
fi

function Grub_addLinuxEntryForEFI {
    menuentry "$1" "$2" "$3"{
        set root=$2
        loopback loop $3
        if [ -e "(loop)/boot/grub/loopback.cfg" ]; then
            configfile "(loop)/boot/grub/loopback.cfg"
        else
            if regexp "[Dd][Ee][Ee][Pp][Ii][Nn].*" "$1" ; then
                linux (loop)/live/vmlinuz.efi  boot=live quiet splash findiso=$3 locales=zh_CN.UTF-8
                initrd "(loop)/live/initrd.lz"
            elif regexp "[Cc][Ee][Nn][Tt][Oo][Ss].*" "$1" ; then
                linux  (loop)/isolinux/vmlinuz root=live:CDLABEL=CentOS-7-x86_64-LiveGNOME-1908 iso-scan/filename==$3 systemd.wants=sshd.service  inst.lang=zh_CN
                initrd (loop)/isolinux/initrd.img
            fi
        fi
        loopback --delete loop
    }
}

function Grub_addWindowsEntryForEFI {
    return
    menuentry "$1" "$2" "$3" {
        set root=$2
        loopback loop $3
        for efi in "efi/microsoft/boot/cdboot.efi" "efi/boot/bootx64.efi" "bootmgr.efi" "bootmgfw.efi" "EFI/Boot/bootmgfw.efi"; do
                if [ -e "(loop)/$efi" ]; then
                    echo "(loop)/$efi"
                    insmod chain
                    insmod ntfs
                    set root=loop
                    chainloader +1
                    chainloader "(loop)/$efi"
                    break
                fi
        done
        loopback --delete loop
    }
}

function Grub_addEntryForMBR {
    menuentry "$1" "$2" "$3" {
        set root=$2
        echo "Loading iso $3 ..."
        initrd16 $3
    }
}


function Grub_getEntryName {
    probe --set entryName -l $root
    set entryName="Boot $1 from ($root):$entryName"
}

set isoFilter=$PREFIX/*.iso
set fileNameFilter="([^\/]+)\.([^\/]+)"

if [ "${grub_platform}" == "efi" ] ; then
    insmod part_gpt
    for volume in (*,*) ; do
        set root=$volume
        #if [ -e "/boot/grub/grub.cfg" -a $root/boot/grub/grub.cfg != $CURRENT_CONFIG ]; then
        #	menuentry "Boot from $root" {
        #       configfile  "/boot/grub/grub.cfg"
        #	}
        #fi
        if [ -e "/iso" ];then
            if search -s -n -f $isoFilter ; then
                for iso in $isoFilter ; do
                    regexp --set=1:name --set=2:extension $fileNameFilter $iso
                    Grub_getEntryName "$name ISO"
                    if regexp "[Ww][Ii][Nn].*" "$name" ; then
                        Grub_addWindowsEntryForEFI "$entryName"  "$volume" "$iso"
                    elif regexp "^\..*" "$name"; then
                        continue
                    else
                        Grub_addLinuxEntryForEFI "$entryName" "$volume" "$iso"
                    fi
                done
            fi
        fi
        if search -s --file -n --set /EFI/Microsoft/Boot/bootmgfw.efi ; then
            menuentry "Boot Windows from ($root)" --unrestricted {
                chainloader /EFI/Microsoft/Boot/bootmgfw.efi
            }
        fi
    done
elif [ "${grub_platform}" == "pc" ] ; then
    insmod part_msdos
    if [ -e $MEMDISK ] ; then
        echo "Loading memdisk ..."
        linux16 $MEMDISK iso raw
        for volume in (*,*) ; do
            set root=$volume
            if search -s -n -f $isoFilter ; then
                for iso in $isoFilter ; do
                    regexp --set=1:name --set=2:extension $fileNameFilter $iso
                    Grub_getEntryName "$name ISO"
                    Grub_addEntryForMBR "$entryName" "$volume" "$iso"
                done
            fi
            if search --file --set /bootmgr; then
                menuentry 'Windows' --unrestricted {
                    chainloader +1
                }
            fi
            if search --file --set /ntldr; then
                menuentry 'Windows' --unrestricted {
                    chainloader +1
                }
            fi
        done
    else
        echo "Can't find $MEMDISK."
    fi
fi


menuentry "[r] Reboot" --class=reboot --hotkey=r{
	echo "重启系统中 ..."
	reboot
}
menuentry "[s] Shutdown" --class=halt --hotkey=s{
	echo "关机中 ..."
	halt
}











